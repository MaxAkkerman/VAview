import { ProviderEventData } from './api';
import { Address } from './utils';
import { ProviderRpcClient } from './index';
export declare class Subscriber {
    private readonly ton;
    private readonly subscriptions;
    constructor(ton: ProviderRpcClient);
    transactions(address: Address): Stream<ProviderEventData<'transactionsFound'>>;
    states(address: Address): Stream<ProviderEventData<'contractStateChanged'>>;
    unsubscribe(): Promise<void>;
    private _addSubscription;
}
export interface Stream<P, T = P> {
    readonly makeProducer: (onData: (event: P) => void, onEnd: () => void) => void;
    readonly stopProducer: () => void;
    first(): Promise<T>;
    on(handler: (item: T) => void): void;
    merge(other: Stream<P, T>): Stream<P, T>;
    map<U>(f: (item: T) => U): Stream<P, U>;
    flatMap<U>(f: (item: T) => U[]): Stream<P, U>;
    filter(f: (item: T) => boolean): Stream<P, T>;
    filterMap<U>(f: (item: T) => (U | undefined)): Stream<P, U>;
    skip(n: number): Stream<P, T>;
    skipWhile(f: (item: T) => boolean): Stream<P, T>;
}
