export interface Stream<P, T = P> {
    readonly makeProducer: (extractor: (event: P) => void) => void;
    next(): Promise<T>;
    merge(other: Stream<P, T>): Stream<P, T>;
    map<U>(f: (item: T) => U): Stream<T, U>;
    flatMap<U>(f: (item: T) => U[]): Stream<T, U>;
    filter(f: (item: T) => boolean): Stream<P, T>;
    filterMap<U>(f: (item: T) => (U | undefined)): Stream<T, U>;
    skip(n: number): Stream<P, T>;
    skipWhile(f: (item: T) => boolean): Stream<P, T>;
}
